import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { HttpClient, HttpClientModule, HttpErrorResponse } from '@angular/common/http';
import { environment } from '@environments/environment';
import { CommonModule } from '@angular/common';
import { finalize } from 'rxjs/operators';
import { NotificationsService } from '@services/notifications.service'; 
import { FormsModule } from '@angular/forms'; 

@Component({
Â  selector: 'app-mock-email',
Â  standalone: true,
Â  imports: [
Â  Â  CommonModule,
Â  Â  HttpClientModule,
Â  Â  FormsModule 
Â  ],
Â  templateUrl: './mock-email.component.html',
Â  styleUrls: ['./mock-email.component.scss']
})
export class MockEmailComponent implements OnInit {
Â  emailData: any;
Â  isLoading = true; 
Â  
Â  isResetFlow = false; 
Â  resetLink: string | null = null; 
Â  confirmationLink: string | null = null; 


Â  constructor(
Â  Â  private route: ActivatedRoute,
Â  Â  private http: HttpClient,
Â  Â  private router: Router,
Â  Â  private notificationsService: NotificationsService 
Â  ) { }

Â  ngOnInit(): void {
Â  Â  this.route.queryParams.subscribe(params => {
Â  Â  Â  const email = params['email'];
Â  Â  Â  const type = params['type'];
Â  Â  Â  const link = params['link'];
Â  Â  Â  
Â  Â  Â  this.isResetFlow = type === 'reset'; 
Â  Â  Â  this.resetLink = link || null; 
Â  Â  Â  
Â  Â  Â  if (email) {
Â  Â  Â  Â  this.fetchMockEmail(email); 
Â  Â  Â  } else {
Â  Â  Â  Â  this.isLoading = false;
Â  Â  Â  Â  this.notificationsService.showNotification('Erro: E-mail nÃ£o fornecido para simulaÃ§Ã£o.', 'erro');
Â  Â  Â  }
Â  Â  });
Â  }

Â  // ðŸ’¥ CORREÃ‡ÃƒO FINAL: Revertendo para GET e enviando o email na URL para sincronizar com o Backend [HttpGet("emails")]
Â  fetchMockEmail(email: string) {
Â  Â  // 1. A URL DEVE incluir o email como Query Parameter
Â  Â  const url = `${environment.apiUrl}/api/testes/emails?email=${email}`;
Â  Â  
Â  Â  // 2. O mÃ©todo DEVE ser GET
Â  Â  this.http.get<any>(url).pipe(finalize(() => this.isLoading = false)).subscribe(
Â  Â  Â  (response) => {
Â  Â  Â  Â  const emails = response && response.$values ? response.$values : [];
Â  Â  Â  Â  if (emails.length > 0) {
Â  Â  Â  Â  Â  this.emailData = emails[emails.length - 1];
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  if (!this.isResetFlow && this.emailData.body) {
Â  Â  Â  Â  Â  Â  Â  this.confirmationLink = this.emailData.confirmationLink || 'MOCK_CONFIRM_LINK'; 
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  this.notificationsService.showNotification('Nenhum e-mail simulado encontrado para este endereÃ§o.', 'alerta');
Â  Â  Â  Â  Â  this.emailData = null;
Â  Â  Â  Â  }
Â  Â  Â  },
Â  Â  Â  (error: HttpErrorResponse) => {
Â  Â  Â  Â  console.error('Erro ao buscar e-mail simulado:', error);
Â  Â  Â  Â  this.notificationsService.showNotification('Erro ao conectar com o serviÃ§o de mock.', 'erro');
Â  Â  Â  Â  this.emailData = null;
Â  Â  Â  }
Â  Â  );
Â  }

Â  onConfirm() {
Â  Â  if (!this.confirmationLink) return;
Â  Â  this.notificationsService.showNotification('SimulaÃ§Ã£o: Confirmando e-mail...', 'sucesso');
Â  Â  this.router.navigate(['/resposta-confirmacao'], { 
Â  Â  Â  Â  queryParams: { status: 'sucesso', message: 'SimulaÃ§Ã£o: E-mail confirmado com sucesso!' }
Â  Â  });
Â  }

Â  onCancel(): void {
Â  Â  this.router.navigate(['/login']);
Â  Â  this.notificationsService.showNotification('SimulaÃ§Ã£o de e-mail cancelada. Retornando ao login.', 'alerta');
Â  }
}